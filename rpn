#!/usr/bin/env python

import operator
import re
import sys


def fail(*args):
    print(*args, file=sys.stderr)
    sys.exit(1)


ops = {
    '+': (operator.add, 2),
    '-': (operator.sub, 2),
    '*': (operator.mul, 2),
    'x': (operator.mul, 2),
    '^': (operator.pow, 2),
    '/': (operator.truediv, 2),
    'sum': (sum, 'all'),
    '<': operator.lt,
}


def print_stack(stack):
    for x in stack:
        print(f"{x:.4f}")


def split_args(*args):
    num_re = re.compile(r'([-+]?[0-9]*\.?[0-9]+)')
    for arg in args:
        arg = arg.strip().lower()
        while matches := num_re.match(arg):
            num = matches[0]
            arg = arg[len(num):]
            yield num
        if arg:
            if arg in ops.keys():
                yield arg
            else:
                for op in arg:
                    yield op


def rpn(args):
    stack = []
    for arg in split_args(*args):
        try:
            stack.append(float(arg))
            continue
        except ValueError:
            pass
        func, stack_needed = ops[arg]
        if stack_needed == 'all':
            func_args = [stack]
            stack = []
        else:
            func_args = stack[-stack_needed:]
            stack = stack[:len(stack) - stack_needed]
        try:
            answer = func(*func_args)
        except TypeError:
            print(f"{arg}: insufficient stack")
            continue
        stack.append(answer)
    return stack


if __name__ == '__main__':
    stack = rpn(sys.argv[1:])
    print_stack(stack)
