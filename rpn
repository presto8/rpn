#!/usr/bin/env python

import argparse
import math
import operator
import re
import sys
from dataclasses import dataclass, field
from typing import Any, Callable, Union, Optional, Generator


def format_help():
    out = []
    out += ["rpn by Preston Hunt (https://github.com/presto8/rpn)"]
    templ = "  {:^12}  {:^10}  {}"
    out += [templ.format("Symbol", "# Args", "Description")]
    for op in OPS:
        out += [templ.format(op.symbol, str(op.arguments), op.help)]
    out += [templ.format("_text", "0", "push 'text' onto stack")]
    return "\n".join(out)


class Rpn:
    def __init__(self):
        self.stack = []

    def push(self, *args):
        "Push item(s) onto stack."
        for arg in args:
            self.stack.append(arg)

    def pop(self, n=1):
        "Pop n items from stack."
        pass

    def eval_stack(self):
        "Evaluate entire stack."
        pass

    def eval(self):
        "Evaluate one time."
        pass


def fail(*args):
    print(*args, file=sys.stderr)
    sys.exit(1)


@dataclass
class Operator:
    symbol: str
    func: Callable
    arguments: Union[int, str] = 2
    arg_pre_fn: Any = None
    chainable: bool = False
    help: str = ""


@dataclass
class StackArgument:
    operator: Optional[Operator] = None
    number: Optional[float] = None
    text: Optional[str] = None


OPS = [
    Operator('+', operator.add, chainable=True, help="add (x+y)"),
    Operator('-', operator.sub, chainable=True, help="subtract (x-y)"),
    Operator('* x', operator.mul, chainable=True, help="multiply (x*y)"),
    Operator('^', operator.pow, help="power (x^y)"),
    Operator('/', operator.truediv, chainable=True, help="divide (x/y)"),
    Operator('= == eq', operator.eq, help="equality (1 if x=y else 0)"),
    Operator('!= !== ne', operator.ne, help="non-equality (0 if x=y else 1)"),
    Operator('not', operator.not_, 1, help="0 if x != 0 else 1"),
    Operator('< lt', operator.lt, help="less than (1 if x<y else 0)"),
    Operator('> gt', operator.gt, help="greater than (1 if x>y else 0)"),
    Operator('<= le lte', operator.le, help="less than or equal (1 if x<=y else 0)"),
    Operator('>= ge gte', operator.ge, help="greater than or equal (1 if x>=y else 0)"),
    Operator('<<', operator.lshift, arg_pre_fn=int, help="left shift (x<<y)"),
    Operator('>>', operator.rshift, arg_pre_fn=int, help="right shift (x>>y)"),
    Operator('mod %', operator.mod, help="modulus (x % y)"),
    Operator('abs', operator.abs, 1, help="absolute value (|x|)"),
    Operator('sqrt', math.sqrt, 1, help="square root (sqrt(x))"),
    Operator('sum', sum, 'all', help="sum of entire stack (x+y+z+w+...)"),
    Operator('product prod', math.prod, 'all', help="product of entire stack (x+y+z+w+...)"),
    Operator('drop d', lambda x: x[:-1], 'all', help="discard top item of stack"),
    Operator('swap', lambda x, y: [y, x], help="swap x and y on the stack"),
    Operator('dupe', lambda x: [x, x], 1, help="make a copy of top item of stack"),
]


def print_stack(stack):
    for x in stack:
        if isinstance(x, str):
            print(x)
        else:
            print(f"{x:.4f}")


class InvalidArgument(Exception):
    pass


def parse_stack(*args) -> Generator[StackArgument, None, None]:
    num_re = re.compile(r'([-+]?[0-9]*\.?[0-9]+(?:[eE][0-9]+)?)')
    for arg in args:
        arg = arg.strip().lower()
        if matches := num_re.findall(arg):
            assert len(matches) == 1
            num = matches[0]
            yield StackArgument(number=float(num))
        elif arg[0] == '_':
            yield StackArgument(text=arg)
        elif op := get_op(arg):
            yield StackArgument(operator=op)
        else:
            raise InvalidArgument(arg)


def get_op(arg) -> Optional[Operator]:
    for op in OPS:
        if arg in op.symbol.split():
            return op
    return None


def rpn(args):
    stack = []
    for arg in parse_stack(*args):
        if text_or_number := arg.text or arg.number:
            stack.append(text_or_number)
            continue
        op = arg.operator
        if op.arguments == 'all':
            func_args = [stack]
            stack = []
        else:
            func_args = stack[-op.arguments:]
            stack = stack[:len(stack) - op.arguments]
        if op.arg_pre_fn:
            func_args = [op.arg_pre_fn(x) for x in func_args]
        try:
            answer = op.func(*func_args)
        except TypeError:
            print(f"{arg}: insufficient stack")
            continue
        if not isinstance(answer, list):
            answer = [answer]
        stack += answer
    return stack


def parse_args():
    parser = argparse.ArgumentParser(epilog=format_help(),
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('stack', nargs='*', help='stack arguments')
    return parser.parse_args()


if __name__ == '__main__':
    ARGS = parse_args()
    stack = rpn(ARGS.stack)
    print_stack(stack)
